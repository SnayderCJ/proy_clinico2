#!/usr/bin/env python
"""
Script para configurar el sistema completo de roles, permisos y men√∫s para SaludTotal
Roles: Administrador, Doctor, Secretaria, Recepcionista
"""
import os
import django

# Configurar Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "proy_clinico.settings")
django.setup()

from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from applications.security.models import User, Menu, Module, GroupModulePermission
from applications.core.models import (
    TipoSangre,
    Especialidad,
    Paciente,
    Doctor,
    Empleado,
    Cargo,
)


def create_complete_role_system():
    print("üè• CONFIGURANDO SISTEMA COMPLETO DE ROLES - SALUDTOTAL")
    print("=" * 60)

    # 1. CREAR MEN√öS PRINCIPALES
    print("\nüìã CREANDO MEN√öS PRINCIPALES...")

    # Men√∫ Administraci√≥n
    menu_admin, created = Menu.objects.get_or_create(
        name="Administraci√≥n", defaults={"icon": "bi bi-gear-fill", "order": 1}
    )
    if created:
        print(f"‚úÖ Men√∫ creado: {menu_admin.name}")

    # Men√∫ Gesti√≥n Cl√≠nica
    menu_clinica, created = Menu.objects.get_or_create(
        name="Gesti√≥n Cl√≠nica", defaults={"icon": "bi bi-hospital", "order": 2}
    )
    if created:
        print(f"‚úÖ Men√∫ creado: {menu_clinica.name}")

    # Men√∫ Atenci√≥n M√©dica
    menu_medica, created = Menu.objects.get_or_create(
        name="Atenci√≥n M√©dica", defaults={"icon": "bi bi-heart-pulse", "order": 3}
    )
    if created:
        print(f"‚úÖ Men√∫ creado: {menu_medica.name}")

    # Men√∫ Recepci√≥n
    menu_recepcion, created = Menu.objects.get_or_create(
        name="Recepci√≥n", defaults={"icon": "bi bi-person-check", "order": 4}
    )
    if created:
        print(f"‚úÖ Men√∫ creado: {menu_recepcion.name}")

    # Men√∫ Reportes
    menu_reportes, created = Menu.objects.get_or_create(
        name="Reportes", defaults={"icon": "bi bi-graph-up", "order": 5}
    )
    if created:
        print(f"‚úÖ Men√∫ creado: {menu_reportes.name}")

    # 2. CREAR M√ìDULOS POR MEN√ö
    print("\nüîß CREANDO M√ìDULOS...")

    # M√ìDULOS DE ADMINISTRACI√ìN
    modules_admin = [
        (
            "security/users/",
            "Usuarios",
            "Gesti√≥n de usuarios del sistema",
            "bi bi-people-fill",
            1,
        ),
        (
            "security/groups/",
            "Grupos y Roles",
            "Gesti√≥n de grupos y permisos",
            "bi bi-shield-check",
            2,
        ),
        (
            "core/empleados/",
            "Empleados",
            "Gesti√≥n de empleados",
            "bi bi-person-badge",
            3,
        ),
        ("core/doctores/", "Doctores", "Gesti√≥n de doctores", "bi bi-person-heart", 4),
        (
            "core/especialidades/",
            "Especialidades",
            "Gesti√≥n de especialidades m√©dicas",
            "bi bi-clipboard-pulse",
            5,
        ),
        (
            "core/configuracion/",
            "Configuraci√≥n",
            "Configuraci√≥n del sistema",
            "bi bi-sliders",
            6,
        ),
    ]

    # M√ìDULOS DE GESTI√ìN CL√çNICA
    modules_clinica = [
        ("core/pacientes/", "Pacientes", "Gesti√≥n de pacientes", "bi bi-people", 1),
        (
            "core/historia-clinica/",
            "Historia Cl√≠nica",
            "Historias cl√≠nicas de pacientes",
            "bi bi-journal-medical",
            2,
        ),
        (
            "core/medicamentos/",
            "Medicamentos",
            "Gesti√≥n de medicamentos",
            "bi bi-capsule",
            3,
        ),
        (
            "core/diagnosticos/",
            "Diagn√≥sticos",
            "Gesti√≥n de diagn√≥sticos",
            "bi bi-clipboard-check",
            4,
        ),
    ]

    # M√ìDULOS DE ATENCI√ìN M√âDICA
    modules_medica = [
        (
            "doctor/calendario/",
            "Agenda M√©dica",
            "Calendario de citas m√©dicas",
            "bi bi-calendar-heart",
            1,
        ),
        (
            "doctor/citas/",
            "Citas M√©dicas",
            "Gesti√≥n de citas",
            "bi bi-calendar-check",
            2,
        ),
        (
            "doctor/atenciones/",
            "Atenciones",
            "Registro de atenciones m√©dicas",
            "bi bi-clipboard-heart",
            3,
        ),
        (
            "doctor/recetas/",
            "Recetas M√©dicas",
            "Emisi√≥n de recetas",
            "bi bi-prescription2",
            4,
        ),
        (
            "doctor/examenes/",
            "√ìrdenes de Examen",
            "√ìrdenes de ex√°menes m√©dicos",
            "bi bi-file-medical",
            5,
        ),
    ]

    # M√ìDULOS DE RECEPCI√ìN
    modules_recepcion = [
        (
            "recepcion/citas/",
            "Agendar Citas",
            "Programaci√≥n de citas",
            "bi bi-calendar-plus",
            1,
        ),
        (
            "recepcion/pacientes/",
            "Registro Pacientes",
            "Registro r√°pido de pacientes",
            "bi bi-person-plus",
            2,
        ),
        ("recepcion/pagos/", "Pagos", "Gesti√≥n de pagos", "bi bi-credit-card", 3),
        (
            "recepcion/sala-espera/",
            "Sala de Espera",
            "Control de sala de espera",
            "bi bi-hourglass-split",
            4,
        ),
    ]

    # M√ìDULOS DE REPORTES
    modules_reportes = [
        (
            "reportes/pacientes/",
            "Reporte Pacientes",
            "Reportes de pacientes",
            "bi bi-file-earmark-text",
            1,
        ),
        (
            "reportes/citas/",
            "Reporte Citas",
            "Reportes de citas m√©dicas",
            "bi bi-calendar-week",
            2,
        ),
        (
            "reportes/ingresos/",
            "Reporte Ingresos",
            "Reportes financieros",
            "bi bi-cash-stack",
            3,
        ),
        (
            "reportes/doctores/",
            "Reporte Doctores",
            "Reportes de actividad m√©dica",
            "bi bi-person-lines-fill",
            4,
        ),
    ]

    # Crear todos los m√≥dulos
    all_modules = {}

    for menu, modules_list in [
        (menu_admin, modules_admin),
        (menu_clinica, modules_clinica),
        (menu_medica, modules_medica),
        (menu_recepcion, modules_recepcion),
        (menu_reportes, modules_reportes),
    ]:
        for url, name, description, icon, order in modules_list:
            module, created = Module.objects.get_or_create(
                url=url,
                defaults={
                    "name": name,
                    "menu": menu,
                    "description": description,
                    "icon": icon,
                    "order": order,
                },
            )
            if created:
                print(f"‚úÖ M√≥dulo creado: {name}")
            all_modules[url] = module

    # 3. CREAR GRUPOS/ROLES
    print("\nüë• CREANDO GRUPOS Y ROLES...")

    roles = [
        ("Administradores", "Acceso completo al sistema"),
        ("Doctores", "Acceso a funciones m√©dicas"),
        ("Secretarias", "Gesti√≥n administrativa y cl√≠nica"),
        ("Recepcionistas", "Atenci√≥n al cliente y citas"),
    ]

    groups = {}
    for role_name, description in roles:
        group, created = Group.objects.get_or_create(name=role_name)
        if created:
            print(f"‚úÖ Grupo creado: {role_name}")
        groups[role_name] = group

    # 4. CONFIGURAR PERMISOS POR ROL
    print("\nüîê CONFIGURANDO PERMISOS POR ROL...")

    # ADMINISTRADORES - Acceso total
    admin_modules = list(all_modules.values())

    # DOCTORES - M√≥dulos m√©dicos y consulta de pacientes
    doctor_modules = [
        all_modules["core/pacientes/"],
        all_modules["core/historia-clinica/"],
        all_modules["core/medicamentos/"],
        all_modules["core/diagnosticos/"],
        all_modules["doctor/calendario/"],
        all_modules["doctor/citas/"],
        all_modules["doctor/atenciones/"],
        all_modules["doctor/recetas/"],
        all_modules["doctor/examenes/"],
        all_modules["reportes/pacientes/"],
        all_modules["reportes/citas/"],
    ]

    # SECRETARIAS - Gesti√≥n administrativa y cl√≠nica
    secretaria_modules = [
        all_modules["core/pacientes/"],
        all_modules["core/historia-clinica/"],
        all_modules["core/empleados/"],
        all_modules["core/doctores/"],
        all_modules["recepcion/citas/"],
        all_modules["recepcion/pacientes/"],
        all_modules["recepcion/pagos/"],
        all_modules["reportes/pacientes/"],
        all_modules["reportes/citas/"],
        all_modules["reportes/ingresos/"],
    ]

    # RECEPCIONISTAS - Atenci√≥n al cliente
    recepcionista_modules = [
        all_modules["core/pacientes/"],
        all_modules["recepcion/citas/"],
        all_modules["recepcion/pacientes/"],
        all_modules["recepcion/pagos/"],
        all_modules["recepcion/sala-espera/"],
    ]

    # Asignar m√≥dulos a grupos
    role_modules = {
        "Administradores": admin_modules,
        "Doctores": doctor_modules,
        "Secretarias": secretaria_modules,
        "Recepcionistas": recepcionista_modules,
    }

    # Obtener permisos b√°sicos
    content_types = ContentType.objects.filter(
        model__in=[
            "paciente",
            "doctor",
            "empleado",
            "user",
            "especialidad",
            "medicamento",
        ]
    )

    all_permissions = Permission.objects.filter(content_type__in=content_types)

    for role_name, modules in role_modules.items():
        group = groups[role_name]

        for module in modules:
            gmp, created = GroupModulePermission.objects.get_or_create(
                group=group, module=module
            )

            if created:
                print(f"‚úÖ Asignado: {role_name} -> {module.name}")

            # Asignar permisos seg√∫n el rol
            if role_name == "Administradores":
                # Administradores tienen todos los permisos
                gmp.permissions.set(all_permissions)
            elif role_name == "Doctores":
                # Doctores pueden ver, agregar y cambiar (no eliminar)
                doctor_perms = all_permissions.filter(
                    codename__in=[
                        "view_paciente",
                        "add_paciente",
                        "change_paciente",
                        "view_doctor",
                        "view_empleado",
                        "view_especialidad",
                        "view_medicamento",
                        "add_medicamento",
                        "change_medicamento",
                    ]
                )
                gmp.permissions.set(doctor_perms)
            elif role_name == "Secretarias":
                # Secretarias pueden gestionar pacientes y empleados
                secretaria_perms = all_permissions.filter(
                    codename__in=[
                        "view_paciente",
                        "add_paciente",
                        "change_paciente",
                        "delete_paciente",
                        "view_doctor",
                        "add_doctor",
                        "change_doctor",
                        "view_empleado",
                        "add_empleado",
                        "change_empleado",
                        "view_user",
                        "add_user",
                        "change_user",
                    ]
                )
                gmp.permissions.set(secretaria_perms)
            else:  # Recepcionistas
                # Recepcionistas solo pueden ver y agregar pacientes
                recepcionista_perms = all_permissions.filter(
                    codename__in=[
                        "view_paciente",
                        "add_paciente",
                        "change_paciente",
                        "view_doctor",
                    ]
                )
                gmp.permissions.set(recepcionista_perms)

    # 5. CREAR USUARIOS DE EJEMPLO
    print("\nüë§ CREANDO USUARIOS DE EJEMPLO...")

    usuarios_ejemplo = [
        {
            "email": "admin@saludtotal.com",
            "username": "admin",
            "first_name": "Administrador",
            "last_name": "Sistema",
            "password": "admin123",
            "groups": ["Administradores"],
            "is_superuser": True,
            "is_staff": True,
        },
        {
            "email": "dr.garcia@saludtotal.com",
            "username": "dr.garcia",
            "first_name": "Carlos",
            "last_name": "Garc√≠a",
            "password": "doctor123",
            "groups": ["Doctores"],
            "is_staff": True,
        },
        {
            "email": "secretaria@saludtotal.com",
            "username": "secretaria",
            "first_name": "Mar√≠a",
            "last_name": "L√≥pez",
            "password": "secretaria123",
            "groups": ["Secretarias"],
            "is_staff": True,
        },
        {
            "email": "recepcion@saludtotal.com",
            "username": "recepcion",
            "first_name": "Ana",
            "last_name": "Mart√≠nez",
            "password": "recepcion123",
            "groups": ["Recepcionistas"],
            "is_staff": True,
        },
    ]

    for user_data in usuarios_ejemplo:
        user, created = User.objects.get_or_create(
            email=user_data["email"],
            defaults={
                "username": user_data["username"],
                "first_name": user_data["first_name"],
                "last_name": user_data["last_name"],
                "is_superuser": user_data.get("is_superuser", False),
                "is_staff": user_data.get("is_staff", False),
            },
        )

        if created:
            user.set_password(user_data["password"])
            user.save()
            print(f"‚úÖ Usuario creado: {user.email}")

            # Asignar grupos
            for group_name in user_data["groups"]:
                group = groups[group_name]
                user.groups.add(group)
                print(f"   ‚Üí Asignado al grupo: {group_name}")

    # 6. CREAR DATOS B√ÅSICOS
    print("\nüè• CREANDO DATOS B√ÅSICOS...")

    # Tipos de sangre
    tipos_sangre = ["O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-"]
    for tipo in tipos_sangre:
        ts, created = TipoSangre.objects.get_or_create(
            tipo=tipo, defaults={"descripcion": f"Tipo de sangre {tipo}"}
        )
        if created:
            print(f"‚úÖ Tipo de sangre: {tipo}")

    # Especialidades m√©dicas
    especialidades = [
        ("Medicina General", "Atenci√≥n m√©dica general y preventiva"),
        ("Cardiolog√≠a", "Especialidad del coraz√≥n y sistema cardiovascular"),
        ("Pediatr√≠a", "Atenci√≥n m√©dica infantil"),
        ("Ginecolog√≠a", "Salud reproductiva femenina"),
        ("Dermatolog√≠a", "Enfermedades de la piel"),
        ("Neurolog√≠a", "Sistema nervioso"),
        ("Traumatolog√≠a", "Lesiones del sistema musculoesquel√©tico"),
        ("Oftalmolog√≠a", "Enfermedades de los ojos"),
        ("Otorrinolaringolog√≠a", "O√≠do, nariz y garganta"),
        ("Psiquiatr√≠a", "Salud mental"),
    ]

    for nombre, descripcion in especialidades:
        esp, created = Especialidad.objects.get_or_create(
            nombre=nombre, defaults={"descripcion": descripcion}
        )
        if created:
            print(f"‚úÖ Especialidad: {nombre}")

    # Cargos para empleados
    cargos = [
        ("M√©dico General", "M√©dico de atenci√≥n primaria"),
        ("M√©dico Especialista", "M√©dico con especializaci√≥n"),
        ("Enfermera", "Profesional de enfermer√≠a"),
        ("Secretaria M√©dica", "Asistente administrativa"),
        ("Recepcionista", "Atenci√≥n al cliente"),
        ("Administrador", "Gesti√≥n administrativa"),
        ("Auxiliar de Enfermer√≠a", "Apoyo en enfermer√≠a"),
    ]

    for nombre, descripcion in cargos:
        cargo, created = Cargo.objects.get_or_create(
            nombre=nombre, defaults={"descripcion": descripcion}
        )
        if created:
            print(f"‚úÖ Cargo: {nombre}")

    # 7. RESUMEN FINAL
    print("\n" + "=" * 60)
    print("üéâ ¬°CONFIGURACI√ìN COMPLETADA EXITOSAMENTE!")
    print("=" * 60)
    print(f"üìã Men√∫s creados: {Menu.objects.count()}")
    print(f"üîß M√≥dulos creados: {Module.objects.count()}")
    print(f"üë• Grupos creados: {Group.objects.count()}")
    print(f"üë§ Usuarios creados: {User.objects.count()}")
    print(f"ü©∏ Tipos de sangre: {TipoSangre.objects.count()}")
    print(f"üè• Especialidades: {Especialidad.objects.count()}")
    print(f"üíº Cargos: {Cargo.objects.count()}")

    print("\nüìù USUARIOS DE ACCESO:")
    print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    print("‚îÇ ROL             ‚îÇ EMAIL                    ‚îÇ PASSWORD   ‚îÇ")
    print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
    print("‚îÇ Administrador   ‚îÇ admin@saludtotal.com     ‚îÇ admin123   ‚îÇ")
    print("‚îÇ Doctor          ‚îÇ dr.garcia@saludtotal.com ‚îÇ doctor123  ‚îÇ")
    print("‚îÇ Secretaria      ‚îÇ secretaria@saludtotal.com‚îÇ secretaria123‚îÇ")
    print("‚îÇ Recepcionista   ‚îÇ recepcion@saludtotal.com ‚îÇ recepcion123‚îÇ")
    print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")

    print("\nüîê PERMISOS POR ROL:")
    print("‚Ä¢ ADMINISTRADORES: Acceso completo al sistema")
    print("‚Ä¢ DOCTORES: Gesti√≥n m√©dica, pacientes, atenciones")
    print("‚Ä¢ SECRETARIAS: Gesti√≥n administrativa y cl√≠nica")
    print("‚Ä¢ RECEPCIONISTAS: Atenci√≥n al cliente y citas")

    print("\n‚ú® El sistema est√° listo para usar!")


if __name__ == "__main__":
    create_complete_role_system()
